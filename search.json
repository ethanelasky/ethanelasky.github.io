[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Ethan Elasky",
    "section": "",
    "text": "I’m a senior studying Data Science at the University of California, Berkeley.\nAt the Haas School of Business, I’m a member of Angus Hildreth’s Social Psychology and Business Lab.\nHaving studied abroad in Taiwan during Spring 2023 and grown up in America, I understand English and Mandarin.\nIn high school, I was ranked top-50 in Lincoln-Douglas debate nationally."
  },
  {
    "objectID": "about.html#about-this-website",
    "href": "about.html#about-this-website",
    "title": "Ethan Elasky",
    "section": "",
    "text": "I’m a senior studying Data Science at the University of California, Berkeley.\nAt the Haas School of Business, I’m a member of Angus Hildreth’s Social Psychology and Business Lab.\nHaving studied abroad in Taiwan during Spring 2023 and grown up in America, I understand English and Mandarin.\nIn high school, I was ranked top-50 in Lincoln-Douglas debate nationally."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ethan Elasky’s Blog",
    "section": "",
    "text": "Everything to Know About Flight Delays\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Flights.html",
    "href": "posts/Flights.html",
    "title": "Everything to Know About Flight Delays",
    "section": "",
    "text": "This is the technical version of an article that analyzes post-Covid flight information up to August 2022 (the latest available as of today). Of great interest are flight delays.\n# Import libraries\nimport pandas as pd\nimport numpy as np\nimport zipfile\nimport os\nimport requests\nfrom pathlib import Path\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline"
  },
  {
    "objectID": "posts/Flights.html#downloading-the-data",
    "href": "posts/Flights.html#downloading-the-data",
    "title": "Everything to Know About Flight Delays",
    "section": "Downloading the data",
    "text": "Downloading the data\nTo investigate flights in the United States, there is no greater resource than the US Department of Transportation’s Bureau of Transportation Statistics. They have a handy HTML page that we can download the data from. The data is available by month, meaning that we must obtain data for each month of all years we are interested in.\nWe can automate this download with the requests library of Python, setting START_YEAR to the beginning year of the period of interest and END_YEAR to the end year (exclusive).\n\nSTART_YEAR = 2022\nEND_YEAR = 2024\n\n\nos.mkdir(\"data\")\n\n\nfor i in range(START_YEAR, END_YEAR):\n    for j in range(1,13):\n        #We set verify to False because an SSL cert error gets thrown otherwise for some reason\n        r = requests.get(f\"https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_{i}_{j}.zip\", verify=False)\n        with open(f\"data/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_{i}_{j}.zip\", \"wb\") as fd:\n            fd.write(r.content)\n\nAt this point, we have a bunch of zip files, one for each month of flights. We’ll unzip them one-by-one.\n\n#Construct an array to hold our zip filepaths\nzips = []\nfor root, directories, filenames in os.walk('data'):\n    for directory in directories:\n         dpath = os.path.join(root, directory)\n\n    for filename in filenames:\n        fpath = os.path.join(root,filename)\n        if fpath[-3:] == 'zip':\n            zips.append(fpath)\n\nfor zip_path in zips:\n    try:\n        my_zip = zipfile.ZipFile(zip_path, 'r')\n        my_zip.extractall('data')\n    except zipfile.BadZipFile:\n        continue"
  },
  {
    "objectID": "posts/Flights.html#reading-in-and-cleaning-data",
    "href": "posts/Flights.html#reading-in-and-cleaning-data",
    "title": "Everything to Know About Flight Delays",
    "section": "Reading in and cleaning data",
    "text": "Reading in and cleaning data\nNow, we read the data in and clean it. We start out by reading in an arbitrary month to get a DataFrame with the correct columns, then loop through each month’s flight records (stored in a csv). We add each month’s flight records to our flights DataFrame; at this point, we are done loading data for this project.\nCleaning the DataFrames involves several steps. To start, we read in this HTML table from the Bureau of Transportation Statistics as a DataFrame. This table matches airlines with abbreviations. To aid legibility, we replace the abbreviations contained in our flights DataFrame with the airlines’ full names.\n\nimport re\n\n#Obtains DataFrame with correct columns\nflights = pd.DataFrame(columns=pd.read_csv(\"data/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2022_5.csv\").columns)\n\n#Concatenates inputs to flights DataFrame\nfor root, directories, filenames in os.walk('data'):\n    for filename in filenames:\n        fpath = os.path.join(root,filename)\n        if (fpath[-3:] == 'csv') & (fpath[5:8] == 'On_'):\n            a = pd.read_csv(fpath)\n\n            # Filter out unneeded rows (only keep things relevant to flight origin, airline, and departure delay)\n            a = a.filter(['CRSDepTime', 'DepDelayMinutes', 'Reporting_Airline', 'TaxiOut', 'Origin', 'Flight_Number_Reporting_Airline'], axis=1)\n\n            # Concatenate month table to flights\n            print(f\"  {fpath}\")\n            flights = pd.concat([flights, a], ignore_index=True, join='inner')\n\n# Obtains a DataFrame version of the HTML table on the BTS Airline Codes webpage\ncodes = pd.read_html(\"https://www.bts.gov/topics/airlines-and-airports/airline-codes\")[0]\nflights = flights.merge(right=codes, left_on='Reporting_Airline', right_on='Code', suffixes=['',''])#.drop([\"Reporting_Airline\", 'Code'], axis=1)\n\nWe now make a copy of flights called delays. We can now safely transform our data and keep the original flights available for later analysis. We’ll also regularize our time (converting the HHMM format to HH.MM, where MM is out of 100 instead of 60).\n\n# Makes a deep copy of flights called delays for transformation in this section. Filter out on-time flights.\nflights['CRSDepTime'] = flights['CRSDepTime'] % 100 * 5/3 * .01 + flights['CRSDepTime'] // 100\nflights['delay'] = flights['DepDelayMinutes'] &gt; 0\ndelays = flights.copy(deep=True)[flights['DepDelayMinutes'] &gt; 0]"
  },
  {
    "objectID": "posts/Flights.html#plot-of-flight-delays-vs-departure-time",
    "href": "posts/Flights.html#plot-of-flight-delays-vs-departure-time",
    "title": "Everything to Know About Flight Delays",
    "section": "Plot of flight delays vs departure time",
    "text": "Plot of flight delays vs departure time\nLet’s take a precursory view of flight delays in the aggregate and see how they correlate with departure time.\n\nsns.set_theme()\n\nf, ax = plt.subplots(figsize=(7, 7), sharex=True, sharey=True)\na = sns.histplot(data=delays, x='CRSDepTime', y='DepDelayMinutes', bins=[12,600],\n                 cmap=sns.color_palette(\"flare_r\", as_cmap=True), cbar=True, cbar_kws={'label': 'Quantity of delays'})\nsns.kdeplot(data=delays.sample(1000), x='CRSDepTime', y='DepDelayMinutes', levels=5, color=\"w\")\n\nplt.title('Density of delays by departure time, ' + str(START_YEAR) + \"-\" + str(END_YEAR - 1))\nplt.xlabel('Departure time')\nplt.ylabel('Departure delay, in minutes')\nplt.xlim((0, 24))\nplt.ylim(bottom=0, top=90)\nplt.xticks(range(0,24,4), ['12am','4am','8am','12pm','4pm','8pm'])\n\n([&lt;matplotlib.axis.XTick at 0x7fc51928ddb0&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc51928de40&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc506530040&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc506531000&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc506531ab0&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc506532560&gt;],\n [Text(0, 0, '12am'),\n  Text(4, 0, '4am'),\n  Text(8, 0, '8am'),\n  Text(12, 0, '12pm'),\n  Text(16, 0, '4pm'),\n  Text(20, 0, '8pm')])\n\n\n\n\n\nWe see that delays are densest between 10am and 8pm. The most common delay takes less than 10 minutes. Next, we’ll look at significant delays, which I will define to be greater than or equal to 30 minutes in length."
  },
  {
    "objectID": "posts/Flights.html#plot-of-delays-greater-than-30-minutes-vs-departure-time",
    "href": "posts/Flights.html#plot-of-delays-greater-than-30-minutes-vs-departure-time",
    "title": "Everything to Know About Flight Delays",
    "section": "Plot of delays greater than 30 minutes vs departure time",
    "text": "Plot of delays greater than 30 minutes vs departure time\nWe filter all delays &lt;= 30 minutes out of the delays table.\n\ndef delay_significance(x):\n    \"\"\"Categorizes delays into one of three categories.\"\"\"\n    if x == 0:\n        return \"On Time\"\n    elif x &lt; 30 and x &gt; 0:\n        return \"Slight Delay\"\n    else:\n        return \"Significant Delay\"\n\n#Creates labels for hue sorting on histogram.\nflights['Delay Status'] = flights['DepDelayMinutes'].apply(delay_significance)\n\nBelow, you can see all significant flight delays plotted against on-time flights.\n\nsns.histplot(flights, x='CRSDepTime', kde=True, hue='Delay Status',\n             binwidth=1, kde_kws={'bw_adjust': 3}).set(xlabel='Departure time', title='Flights from '\n                             + str(START_YEAR) + ' to ' + str(END_YEAR) + ', by hour')\n\nplt.xlim(0,24)\nplt.xticks(range(0,24,4), ['12am','4am','8am','12pm','4pm','8pm'])\n\n([&lt;matplotlib.axis.XTick at 0x7fc52b1e4b20&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc52b1e4af0&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc52c489c30&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc524cbfd30&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc524ce8b80&gt;,\n  &lt;matplotlib.axis.XTick at 0x7fc524cbfcd0&gt;],\n [Text(0, 0, '12am'),\n  Text(4, 0, '4am'),\n  Text(8, 0, '8am'),\n  Text(12, 0, '12pm'),\n  Text(16, 0, '4pm'),\n  Text(20, 0, '8pm')])\n\n\n\n\n\nFrom the chart, we see that both slight and significant delays increase as the day goes on, although significant delays have a more consistent increase between 6am and 6pm, while slight delays seem to plateau around 10am."
  },
  {
    "objectID": "posts/Flights.html#delays-by-airline",
    "href": "posts/Flights.html#delays-by-airline",
    "title": "Everything to Know About Flight Delays",
    "section": "Delays by airline",
    "text": "Delays by airline\nNow, let’s look at delays by airline. We merge wholly-owned subsidiaries with their parent company (a complete list of wholly-owned subsidiary airlines in North America can be found on Wikipedia), as people do not often see their brand nor purchase from them. Some airlines, such as Republic Airline, are regional airlines that fly under multiple airline names; our data does not represent whose banner they fly under for a given flight, making it impossible for us to merge their flights with their contracted carrier.\n\n# Adds new departure hour columns to flights and delays for easier charting\nflights['CRSDepHour'], delays['CRSDepHour'] = flights['CRSDepTime'] // 1,  delays['CRSDepTime'] // 1\n\n#Selects only for significant delays\ndelays = delays[delays['DepDelayMinutes'] &gt;= 30]\n\n# Merges wholly-owned subsidiary airlines with their parent companies\ndelays_ma = delays.replace(to_replace={\"Airline\": {\"Horizon Air\":\"Alaska Airlines Inc.\", \"Envoy Air\":\"American Airlines Inc.\", \"PSA Airlines Inc.\":\"American Airlines Inc.\", \"Endeavor Air Inc.\": \"Delta Air Lines Inc.\"}})\nflights_ma = flights.replace(to_replace={\"Airline\": {\"Horizon Air\":\"Alaska Airlines Inc.\", \"Envoy Air\":\"American Airlines Inc.\", \"PSA Airlines Inc.\":\"American Airlines Inc.\", \"Endeavor Air Inc.\": \"Delta Air Lines Inc.\"}})\n\ndef airline_delay_frequencies(airline, delays, flights):\n    \"\"\"Returns delay proportions, grouped by departure hour and departure time.\"\"\"\n    total_delays = delays[delays['Airline'] == airline].groupby('CRSDepHour')['CRSDepTime'].count()\n    total_flights = flights[flights['Airline'] == airline].groupby('CRSDepHour')['CRSDepTime'].count()\n    return (total_delays / total_flights).reindex(np.arange(24), fill_value=0) * 100\n\n# Accumulates multiple airline Series into a DataFrame for line plot\nairlines = ['American Airlines Inc.', #'SkyWest Airlines Inc.',\n       'Alaska Airlines Inc.', 'United Air Lines Inc.',\n       'Delta Air Lines Inc.', 'Frontier Airlines Inc.', #'Allegiant Air',\n       #'Hawaiian Airlines Inc.',\n        'Spirit Air Lines',\n       'Southwest Airlines Co.', #'Mesa Airlines Inc.', 'Republic Airline',\n       'JetBlue Airways']\nproportions = pd.DataFrame()\nfor airline in airlines:\n    proportions[airline] = airline_delay_frequencies(airline, delays_ma, flights_ma)\n\n\n# Constructs a bar plot of flight delay percentage according to time\na = sns.lineplot(data=proportions, palette=\"tab10\", linewidth=2.5)\nplt.xlabel(\"Scheduled Hour of Flight Departure\")\nplt.ylabel(\"Percentage\")\nplt.title(\"Percent of flights significantly delayed, by time of day\")\nplt.xticks(range(0,24,4), ['12am','4am','8am','12pm','4pm','8pm'])\nplt.ylim(0, 40)\nsns.move_legend(a, \"upper left\", bbox_to_anchor=(1, 1))\n\n\n\n\nAs a proportion of total flights, the chance of significant delay is lowest in the early hours of the morning, regardless of airline. From there, the chance of delay steadily increases and peaks in the evening. Then there is a dip around midnight, with delays skyrocketing in the wee hours of the morning.\nThe budget airlines (Frontier, Spirit, Southwest, and JetBlue) all have higher rates of delay throughout the day according to this dataset, with the exception of Southwest, which has a delay rate comparable with the non-budget airlines in the morning. However, by 12pm, Southwest’s significant delay rate grows past that of the non-budget airlines and joins its budget peers by 4 or 5 pm.\nAfter aggregating budget and non-budget airlines, we can notice a large difference between budget airline performance and non-budget performance in terms of significant delays.\nBy the numbers:\n\n(delays.groupby('Airline').count()[['CRSDepTime']] / flights.groupby('Airline').count()[['CRSDepTime']] * 100).sort_values('CRSDepTime', ascending=False).rename({'CRSDepTime':'% Flights Significantly Delayed'}, axis=1)\n\n\n\n  \n    \n      \n\n\n\n\n\n\n% Flights Significantly Delayed\n\n\nAirline\n\n\n\n\n\nJetBlue Airways\n22.078514\n\n\nFrontier Airlines Inc.\n21.896298\n\n\nAllegiant Air\n18.991785\n\n\nSpirit Air Lines\n16.958591\n\n\nSouthwest Airlines Co.\n15.292280\n\n\nAmerican Airlines Inc.\n14.529106\n\n\nMesa Airlines Inc.\n13.838768\n\n\nUnited Air Lines Inc.\n12.994220\n\n\nHawaiian Airlines Inc.\n11.101448\n\n\nPSA Airlines Inc.\n11.007379\n\n\nDelta Air Lines Inc.\n10.671968\n\n\nSkyWest Airlines Inc.\n10.629637\n\n\nAlaska Airlines Inc.\n10.458504\n\n\nRepublic Airline\n10.361243\n\n\nEndeavor Air Inc.\n9.843149\n\n\nEnvoy Air\n9.762695\n\n\nHorizon Air\n8.873647"
  }
]